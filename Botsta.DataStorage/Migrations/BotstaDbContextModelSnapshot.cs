// <auto-generated />
using System;
using Botsta.DataStorage.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Botsta.DataStorage.Migrations
{
    [DbContext(typeof(BotstaDbContext))]
    partial class BotstaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Botsta.DataStorage.Models.Bot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApiKeyHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApiKeySalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BotName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ChatroomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Registerd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WebhookUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatroomId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Bots");
                });

            modelBuilder.Entity("Botsta.DataStorage.Models.Chatroom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Chatroom");
                });

            modelBuilder.Entity("Botsta.DataStorage.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatroomId")
                        .HasColumnType("uuid");

                    b.Property<string>("MessageJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<int>("SenderType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Botsta.DataStorage.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Registerd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ChatroomMessage", b =>
                {
                    b.Property<Guid>("ChatroomsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessagesId")
                        .HasColumnType("uuid");

                    b.HasKey("ChatroomsId", "MessagesId");

                    b.HasIndex("MessagesId");

                    b.ToTable("ChatroomMessage");
                });

            modelBuilder.Entity("ChatroomUser", b =>
                {
                    b.Property<Guid>("ChatroomsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("ChatroomsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ChatroomUser");
                });

            modelBuilder.Entity("Botsta.DataStorage.Models.Bot", b =>
                {
                    b.HasOne("Botsta.DataStorage.Models.Chatroom", null)
                        .WithMany("Bots")
                        .HasForeignKey("ChatroomId");

                    b.HasOne("Botsta.DataStorage.Models.User", "Owner")
                        .WithMany("Bots")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ChatroomMessage", b =>
                {
                    b.HasOne("Botsta.DataStorage.Models.Chatroom", null)
                        .WithMany()
                        .HasForeignKey("ChatroomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Botsta.DataStorage.Models.Message", null)
                        .WithMany()
                        .HasForeignKey("MessagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatroomUser", b =>
                {
                    b.HasOne("Botsta.DataStorage.Models.Chatroom", null)
                        .WithMany()
                        .HasForeignKey("ChatroomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Botsta.DataStorage.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Botsta.DataStorage.Models.Chatroom", b =>
                {
                    b.Navigation("Bots");
                });

            modelBuilder.Entity("Botsta.DataStorage.Models.User", b =>
                {
                    b.Navigation("Bots");
                });
#pragma warning restore 612, 618
        }
    }
}
